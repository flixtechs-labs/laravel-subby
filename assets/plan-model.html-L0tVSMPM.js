import{_ as r,r as l,c,a as n,d as a,w as e,e as s,b as o,o as d}from"./app-Vnr7Qnzh.js";const u={},h=n("h1",{id:"plan-model",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#plan-model"},[n("span",null,"Plan Model")])],-1),g={class:"table-of-contents"},m=o(`<h2 id="create-a-plan" tabindex="-1"><a class="header-anchor" href="#create-a-plan"><span>Create a Plan</span></a></h2><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Flixtechs<span class="token punctuation">\\</span>Subby<span class="token punctuation">\\</span>Models<span class="token punctuation">\\</span>Plan</span><span class="token punctuation">;</span>

<span class="token variable">$plan</span> <span class="token operator">=</span> <span class="token class-name static-context">Plan</span><span class="token operator">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;tag&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;basic&#39;</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;name&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Basic Plan&#39;</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;description&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;For small businesses&#39;</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;price&#39;</span> <span class="token operator">=&gt;</span> <span class="token number">9.99</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;signup_fee&#39;</span> <span class="token operator">=&gt;</span> <span class="token number">1.99</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;invoice_period&#39;</span> <span class="token operator">=&gt;</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;invoice_interval&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;month&#39;</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;trial_period&#39;</span> <span class="token operator">=&gt;</span> <span class="token number">15</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;trial_interval&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;day&#39;</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;grace_period&#39;</span> <span class="token operator">=&gt;</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;grace_interval&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;day&#39;</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;tier&#39;</span> <span class="token operator">=&gt;</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;currency&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;EUR&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="get-plan-details" tabindex="-1"><a class="header-anchor" href="#get-plan-details"><span>Get Plan details</span></a></h2><p>You can query the plan for further details as follows:</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$plan</span> <span class="token operator">=</span> <span class="token class-name static-context">Plan</span><span class="token operator">::</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Or querying by tag</span>
<span class="token variable">$plan</span> <span class="token operator">=</span> <span class="token class-name static-context">Plan</span><span class="token operator">::</span><span class="token function">getByTag</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;basic&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Get all plan features                </span>
<span class="token variable">$plan</span><span class="token operator">-&gt;</span><span class="token property">features</span><span class="token punctuation">;</span>

<span class="token comment">// Get all plan subscriptions</span>
<span class="token variable">$plan</span><span class="token operator">-&gt;</span><span class="token property">subscriptions</span><span class="token punctuation">;</span>

<span class="token comment">// Check if the plan is free</span>
<span class="token variable">$plan</span><span class="token operator">-&gt;</span><span class="token function">isFree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Check if the plan has trial period</span>
<span class="token variable">$plan</span><span class="token operator">-&gt;</span><span class="token function">hasTrial</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Both <code>$plan-&gt;features</code> and <code>$plan-&gt;subscriptions</code> are collections, driven from relationships, and thus you can query these relations as any normal Eloquent relationship. E.g. <code>$plan-&gt;features()-&gt;where(&#39;tag&#39;, &#39;social_profiles&#39;)-&gt;first()</code> or <code>$plan-&gt;getFeatureByTag(&#39;social_profiles&#39;)</code>.</p><p>Also read:</p>`,7),k=o('<h2 id="trial-modes" tabindex="-1"><a class="header-anchor" href="#trial-modes"><span>Trial modes</span></a></h2><p>There are two available trial modes: <code>inside</code> or <code>outside</code>. This defines how the trial will be counted when renewal time is due.</p><p><strong>USAGE WILL NOT BE CLEARED</strong> when user has had trial time. This is what gives sense to both methods.</p><p>When a <strong>new subscription</strong> to a plan is made:</p><h3 id="if-plan-has-trial" tabindex="-1"><a class="header-anchor" href="#if-plan-has-trial"><span>If plan has trial</span></a></h3><p>If plan has trial, subscriber does not have subscription but only a trial. Subscription period starts and ends at <code>null</code> and this is considered subscription is not made. Because in a real case scenario, when a subscriber has a trial it does not have a subscription yet, so the invoice period is made and charged after the trial has ended.</p><h4 id="renewal-when-trial-is-inside" tabindex="-1"><a class="header-anchor" href="#renewal-when-trial-is-inside"><span>Renewal when trial is &quot;inside&quot;</span></a></h4><p>If trial mode is <code>inside</code>; when trial ends and is renewed invoice period will have substracted the days of trial that have been used.</p><p><em>Example:</em> 7 day trial in a 30 day subscription period.</p><ul><li>User uses 3 days, likes the app them and renews the subscription. <strong>Result:</strong> The next subscription renewal will be in 27 days.</li><li>User uses all 7 day trial. Forgets about the app and comes back a week later. <strong>Result:</strong> The next subscription renewal will be in 23 days.</li></ul><p>In summary: this is <strong>NOT</strong> a free trial. User always ends up paying the full price for full period.</p><h4 id="renewal-when-trial-is-outside" tabindex="-1"><a class="header-anchor" href="#renewal-when-trial-is-outside"><span>Renewal when trial is &quot;outside&quot;</span></a></h4><p>If trial mode is <code>outside</code>; when trial ends and is renewed, invoice period will start at the moment it&#39;s renewed.</p><p><em>Example:</em> 7 day trial in a 30 day subscription period.</p><ul><li>User uses 3 days, likes the app them and renews the subscription. <strong>Result:</strong> The next subscription renewal will be in 30 days. User got 3 days for free.</li><li>User uses all 7 day trial. Forgets about the app and comes back a week later. <strong>Result:</strong> The next subscription renewal will be in 30 days. User got 7 days for free.</li></ul><p>In summary: this is <strong>IS</strong> a free trial. User does not pay for the trial period, but for the next subscription period.</p><h3 id="if-plan-does-not-have-trial" tabindex="-1"><a class="header-anchor" href="#if-plan-does-not-have-trial"><span>If plan does not have trial</span></a></h3><p>If plan does not have trial, subscriber has subscription. Because when a plan does not have trial, a new subscription activates a new invoicing period.</p>',18),b={id:"trial-period-time-related-functions",tabindex:"-1"},v={class:"header-anchor",href:"#trial-period-time-related-functions"},f=o(`<p>You can get some information about duration of your trial with:</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$plan</span><span class="token operator">-&gt;</span><span class="token function">getTrialTotalDurationIn</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;day&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Returns number of days trial lasts</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>You can use Carbon accepted intervals (in singular): <code>year</code>,<code>month</code>,<code>day</code>,<code>hour</code>,<code>minute</code>,<code>second</code>,<code>microsecond</code>...</p><h2 id="tiers" tabindex="-1"><a class="header-anchor" href="#tiers"><span>Tiers</span></a></h2><p>The use of tiers is <strong>optional</strong>. Usually a tier is a &quot;level&quot; of subscription.</p><p>It helps with upgrading or downgrading because usually an upgrade is changed, billed and renewed instantly, and a downgrade is changed and billed at the end of period ( see <a href="https://github.com/bpuig/laravel-subby-schedule" target="_blank" rel="noopener noreferrer">laravel-subby-schedule</a>).</p><h3 id="example" tabindex="-1"><a class="header-anchor" href="#example"><span>Example</span></a></h3><p>The way it&#39;s thought is:</p><p>You have 3 plans: <strong>Basic</strong>, <strong>Intermediate</strong> and <strong>Pro</strong>. How do you now which is better than the other? You can look at the price.</p><p>But... what if there is a promo during some time and the price of <strong>Intermediate</strong> is lower now than <strong>Basic</strong> will be next month when there is no promo? When you change the subscription plan from your promo <strong>Intermediate</strong> to <strong>Basic</strong> normally would be a downgrade, but now prices are reversed and action is an upgrade. Weird, huh?</p><p>What if you customize your user subscription and now it is somewhere in the middle between <strong>Intermediate</strong> and <strong>Pro</strong>? You can change the tier to a number in between, so you know what to do when changing (downgrading) to existing Intermediate or upgrading to Pro.</p><p>Comparing tier numbers, you can know which subscription or plan is superior to another.</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token comment">// Example comparing current plan subscription to another plan</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$user</span><span class="token operator">-&gt;</span><span class="token function">subscription</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;main&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token property">tier</span> <span class="token operator">&lt;</span> <span class="token variable">$newPlan</span><span class="token operator">-&gt;</span><span class="token property">tier</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">myUpgradeFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">myDowngradeFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13),w={id:"grace",tabindex:"-1"},y={class:"header-anchor",href:"#grace"},_=o(`<p>Grace period is the extra time the subscription will be considered active after it has ended. By default is disabled, you can set it when creating the plan with a <code>grace_period</code> and <code>grace_interval</code>. It will be inherited by new subscriptions and also will be synchronized when using <code>syncPlan</code>.</p><h3 id="grace-related-functions" tabindex="-1"><a class="header-anchor" href="#grace-related-functions"><span>Grace related functions</span></a></h3><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$plan</span><span class="token operator">-&gt;</span><span class="token function">hasGrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Returns boolean indicating if plan has grace period</span>
<span class="token variable">$plan</span><span class="token operator">-&gt;</span><span class="token function">getGraceTotalDurationIn</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;day&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Returns duration integer in set Carbon interval (second, day, month...)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,3),x={id:"subscription-period-time-related-functions",tabindex:"-1"},q={class:"header-anchor",href:"#subscription-period-time-related-functions"},T=o(`<p>You can get some information about duration of the subscription with:</p><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token variable">$plan</span><span class="token operator">-&gt;</span><span class="token function">getSubscriptionTotalDurationIn</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;day&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Returns number of days subscription lasts</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>You can use Carbon accepted intervals (in singular): <code>year</code>,<code>month</code>,<code>day</code>,<code>hour</code>,<code>minute</code>,<code>second</code>,<code>microsecond</code>...</p>`,3);function I(P,B){const t=l("router-link"),i=l("Badge"),p=l("RouteLink");return d(),c("div",null,[h,n("nav",g,[n("ul",null,[n("li",null,[a(t,{to:"#create-a-plan"},{default:e(()=>[s("Create a Plan")]),_:1})]),n("li",null,[a(t,{to:"#get-plan-details"},{default:e(()=>[s("Get Plan details")]),_:1})]),n("li",null,[a(t,{to:"#trial-modes"},{default:e(()=>[s("Trial modes")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#if-plan-has-trial"},{default:e(()=>[s("If plan has trial")]),_:1})]),n("li",null,[a(t,{to:"#if-plan-does-not-have-trial"},{default:e(()=>[s("If plan does not have trial")]),_:1})]),n("li",null,[a(t,{to:"#trial-period-time-related-functions"},{default:e(()=>[s("Trial period time related functions "),a(i,{text:"new in v5.0",type:"tip"})]),_:1})])])]),n("li",null,[a(t,{to:"#tiers"},{default:e(()=>[s("Tiers")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#example"},{default:e(()=>[s("Example")]),_:1})])])]),n("li",null,[a(t,{to:"#grace"},{default:e(()=>[s("Grace "),a(i,{text:"new in v5.0",type:"tip"})]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#grace-related-functions"},{default:e(()=>[s("Grace related functions")]),_:1})])])]),n("li",null,[a(t,{to:"#subscription-period-time-related-functions"},{default:e(()=>[s("Subscription period time related functions "),a(i,{text:"new in v5.0",type:"tip"})]),_:1})])])]),n("p",null,[s("This is the main model of the package, there is nothing without plans. After creating a plan, you can "),a(p,{to:"/v5.x/models/plan-subscription-model.html#create-a-subscription"},{default:e(()=>[s("attach it to a subscription")]),_:1}),s(".")]),m,n("ul",null,[n("li",null,[a(p,{to:"/v5.x/models/plan-feature-model.html#get-plan-feature-value"},{default:e(()=>[s("Get Plan Feature value")]),_:1})])]),k,n("h3",b,[n("a",v,[n("span",null,[s("Trial period time related functions "),a(i,{text:"new in v5.0",type:"tip"})])])]),f,n("h2",w,[n("a",y,[n("span",null,[s("Grace "),a(i,{text:"new in v5.0",type:"tip"})])])]),_,n("h2",x,[n("a",q,[n("span",null,[s("Subscription period time related functions "),a(i,{text:"new in v5.0",type:"tip"})])])]),T])}const $=r(u,[["render",I],["__file","plan-model.html.vue"]]),R=JSON.parse('{"path":"/v5.x/models/plan-model.html","title":"Plan Model","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Create a Plan","slug":"create-a-plan","link":"#create-a-plan","children":[]},{"level":2,"title":"Get Plan details","slug":"get-plan-details","link":"#get-plan-details","children":[]},{"level":2,"title":"Trial modes","slug":"trial-modes","link":"#trial-modes","children":[{"level":3,"title":"If plan has trial","slug":"if-plan-has-trial","link":"#if-plan-has-trial","children":[]},{"level":3,"title":"If plan does not have trial","slug":"if-plan-does-not-have-trial","link":"#if-plan-does-not-have-trial","children":[]},{"level":3,"title":"Trial period time related functions","slug":"trial-period-time-related-functions","link":"#trial-period-time-related-functions","children":[]}]},{"level":2,"title":"Tiers","slug":"tiers","link":"#tiers","children":[{"level":3,"title":"Example","slug":"example","link":"#example","children":[]}]},{"level":2,"title":"Grace","slug":"grace","link":"#grace","children":[{"level":3,"title":"Grace related functions","slug":"grace-related-functions","link":"#grace-related-functions","children":[]}]},{"level":2,"title":"Subscription period time related functions","slug":"subscription-period-time-related-functions","link":"#subscription-period-time-related-functions","children":[]}],"git":{"updatedTime":1716242914000,"contributors":[{"name":"Borja Puig","email":"bdpuig@gmail.com","commits":4},{"name":"Given Ncube","email":"givenyslim12@gmail.com","commits":1},{"name":"bpuig","email":"bdpuig@gmail.com","commits":1}]},"filePathRelative":"v5.x/models/plan-model.md"}');export{$ as comp,R as data};
